// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  user
  legal_person
}

model User {
  id           String      @id @default(uuid())
  name         String?     @db.VarChar(128)
  account_type AccountType // user | legal_person
  birthdate    DateTime?
  document_id  String?     @db.VarChar(14) // CPF or CNPJ
  avatar_url   String?     @db.VarChar(255)
  email        String      @unique @db.VarChar(128)
  password     String      @db.VarChar(100)
  phone_number String?     @db.VarChar(12)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  deleted_at   DateTime?

  legal_person LegalPerson?
  address      Address?
  pets         Pet[]

  @@map("users")
}

model LegalPerson {
  id              String  @id @default(uuid())
  user_id         String  @unique
  twitter         String?
  facebook        String?
  instagram       String?
  website         String?
  opening_hours   String  @db.Text // Formato de JSON  
  adoption_policy String // Politica de adoção

  user User @relation(fields: [user_id], references: [id])

  @@map("legal_persons")
}

model Address {
  id        String   @id @default(uuid())
  user_id   String   @unique
  address   String
  city      String
  state     String
  latitude  Decimal?
  longitude Decimal?

  user User @relation(fields: [user_id], references: [id])

  @@map("addresses")
}

model Breed {
  id                 Int     @id @default(autoincrement())
  name               String // Nome Raça
  type_of            String // Tipo (cachorro, gato, etc)
  size               String // Tamanho
  description        String? @db.Text // Descrição
  height             String? // Altura 
  weight             String? // Peso
  physical_char      String? // Caracteristicas Fisicas
  disposition        String? // Disposição (alegre, calmo, etc)
  ideal_for          String? // Ideal para (idosos, crianças)
  coat               String? // Pelagem
  img_url            String? // Link imagem
  housing_structures String? // Clima adequado
  training_level     String? // Nivel de adestramento
  life_expectancy    String? // Expectativa de vida
  category           String? // Categoria

  pets Pet[]

  @@map("breeds")
}

model Pet {
  id                    String   @id @default(uuid())
  name                  String
  breed_id              Int
  size                  String // Tamanho
  weight                Float // Peso
  adoption_date         DateTime // Data de adoção
  birthdate             DateTime // Data de nascimento
  comorbidity           String? // Comorbidade
  tags                  String?
  neutered              Boolean? // Castrado
  available_to_adoption Boolean  @default(true)
  user_id               String

  user     User       @relation(fields: [user_id], references: [id])
  breed    Breed      @relation(fields: [breed_id], references: [id])
  images   PetImage[]
  vaccines Vaccine[]

  @@map("pets")
}

model PetImage {
  id     String @id @default(uuid())
  url    String @db.VarChar(255)
  pet_id String

  pet Pet @relation(fields: [pet_id], references: [id])

  @@map("pets_image")
}

model Vaccine {
  id        String   @id @default(uuid())
  pet_id    String
  name      String   @db.VarChar(50)
  date      DateTime
  doctor_id String?  @db.VarChar(15)

  pet Pet @relation(fields: [pet_id], references: [id])

  @@map("vaccines")
}
